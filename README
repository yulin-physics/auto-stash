# AutoStash
Create Chrome extensions with Rust & WASM.

WASM-powered browser extension in Rust that saves form progress and saves it into [chrome storage](https://developer.chrome.com/docs/extensions/reference/api/storage).


‚öôÔ∏è Tools You‚Äôll Use

ü¶Ä wasm-bindgen: for JS interop

üß∞ wasm-pack: to compile Rust to WebAssembly

üåç Web Extension API: to run your Rust code in the browser

üì¶ JavaScript wrapper to load the WASM module in your extension

## Why this is a Rust library and not an executable

Rust project for your browser extension is a library (`lib`) instead of an executable (`bin`) has to do with how WebAssembly integrates into the browser.

When you compile Rust to WebAssembly for the web, you're not running a standalone binary (like you would with a CLI app). Instead:

- The browser loads your `.wasm` file like a module.

- JavaScript acts as the ‚Äúmain‚Äù runner.

- Your Rust code exposes functions using `#[wasm_bindgen]` so JS can call them.

- The Rust function `#[wasm_bindgen(start)]` acts like the ‚Äúmain‚Äù entry point, but this optional. It‚Äôs just a convenient hook for running initialization logic automatically when the WASM module is loaded (by calling the `init()` function in JavaScript which is automatically generated by `wasm-pack`.). You don‚Äôt need it if you're exporting functions and calling them from JS. Many extensions/modules avoid it to keep JS in full control of lifecycle.

So your crate needs to be a `cdylib`:
```rust
[lib]
crate-type = ["cdylib"]
```
This tells Rust to compile into a shared binary format that other languages (JS, in this case) can load, so it can interop with JS, be used in browser extensions, and works in browsers.

Rust executables (`[[bin]]`) compile to native machine code ‚Äî not WebAssembly. Even if you tried to use `main.rs` and `fn main()`, it wouldn‚Äôt work in a browser because:

- Browsers don‚Äôt know how to run a native Rust binary.

- There's no terminal/CLI to invoke it.

- You need to interoperate with the DOM, events, etc., which requires JS integration.











wasm-pack build --target web

